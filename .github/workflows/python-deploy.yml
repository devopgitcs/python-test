name: Deploy Python App to Azure (OIDC) with Slots

env:
  AZURE_WEBAPP_PACKAGE_PATH: 'app.zip'
  PYTHON_VERSION: '3.9'
  # The Key Vault name from which to fetch secrets
  AZURE_KEYVAULT_NAME: 'kv-appdev-Dev-04'  # Update with your Key Vault name

defaults:
  run:
    working-directory: '.'

permissions:
  contents: read
  id-token: write

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python app.py &
          sleep 3
          curl -f http://localhost:8000
          echo "Tests passed!"

      - name: Package application for deployment
        run: zip -r app.zip .

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: app.zip

  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [ production, dev, staging ]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: python-app

      # Authenticate with Azure using OIDC.
      # The following values are provided as repository variables (or hard-coded) 
      # because they are needed to authenticate and are not considered sensitive.
      - name: Azure Login (OIDC)
        uses: azure/login@v1.5.0
        with:
          client-id: ${{ secret.AZURE_CLIENT_ID }}         # Set as repository variable (non-secret)
          tenant-id: ${{ secret.AZURE_TENANT_ID }}
          subscription-id: ${{ secret.AZURE_SUBSCRIPTION_ID }}

      # Now fetch all other configuration values from Key Vault.
      - name: Fetch secrets from Key Vault
        id: fetch_secrets
        run: |
          echo "Fetching secrets from Key Vault: $AZURE_KEYVAULT_NAME"
          export AZURE_CLIENT_ID=$(az keyvault secret show --vault-name "$AZURE_KEYVAULT_NAME" --name "AZURE-CLIENT-ID" --query value -o tsv)
          export AZURE_TENANT_ID=$(az keyvault secret show --vault-name "$AZURE_KEYVAULT_NAME" --name "AZURE-TENANT-ID" --query value -o tsv)
          export AZURE_SUBSCRIPTION_ID=$(az keyvault secret show --vault-name "$AZURE_KEYVAULT_NAME" --name "AZURE-SUBSCRIPTION-ID" --query value -o tsv)
          export AZURE_WEBAPP_NAME=$(az keyvault secret show --vault-name "$AZURE_KEYVAULT_NAME" --name "AZURE-WEBAPP-NAME" --query value -o tsv)
          export AZURE_PRIVATE_ENDPOINT_NAME=$(az keyvault secret show --vault-name "$AZURE_KEYVAULT_NAME" --name "AZURE-PRIVATE-ENDPOINT-NAME" --query value -o tsv)
          export AZURE_RESOURCE_GROUP=$(az keyvault secret show --vault-name "$AZURE_KEYVAULT_NAME" --name "AZURE-RESOURCE-GROUP" --query value -o tsv)
          echo "AZURE_CLIENT_ID=${AZURE_CLIENT_ID}" >> $GITHUB_ENV
          echo "AZURE_TENANT_ID=${AZURE_TENANT_ID}" >> $GITHUB_ENV
          echo "AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}" >> $GITHUB_ENV
          echo "AZURE_WEBAPP_NAME=${AZURE_WEBAPP_NAME}" >> $GITHUB_ENV
          echo "AZURE_PRIVATE_ENDPOINT_NAME=${AZURE_PRIVATE_ENDPOINT_NAME}" >> $GITHUB_ENV
          echo "AZURE_RESOURCE_GROUP=${AZURE_RESOURCE_GROUP}" >> $GITHUB_ENV

      # Test network connectivity to the Private Endpoint.
      - name: Test network connectivity to Private Endpoint
        run: |
          az network private-endpoint-connection show \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --name "$AZURE_PRIVATE_ENDPOINT_NAME" \
            --type Microsoft.Web/sites \
            --resource-name "$AZURE_WEBAPP_NAME"

      # Deploy to Production slot if environment is "production" (default slot).
      - name: Deploy to Azure Web App (Production)
        if: matrix.environment == 'production'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      # Deploy to a non-production slot (dev, qa, or staging).
      - name: Deploy to Azure Web App Slot
        if: matrix.environment != 'production'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: ${{ matrix.environment }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
